package bitmap

import (
	"reflect"
	"testing"

	"github.com/a1emax/youngine/x/colors"
)

func TestNew(t *testing.T) {
	type args struct {
		width  int
		height int
	}
	type want struct {
		result Bitmap
	}
	tests := []struct {
		name string
		args args
		want want
	}{
		{
			name: "0x0",
			args: args{
				width:  0,
				height: 0,
			},
			want: want{
				result: Bitmap{
					data:   make([]byte, 0),
					width:  0,
					height: 0,
				},
			},
		},
		{
			name: "1x0",
			args: args{
				width:  1,
				height: 0,
			},
			want: want{
				result: Bitmap{
					data:   make([]byte, 0),
					width:  1,
					height: 0,
				},
			},
		},
		{
			name: "0x2",
			args: args{
				width:  0,
				height: 2,
			},
			want: want{
				result: Bitmap{
					data:   make([]byte, 0),
					width:  0,
					height: 2,
				},
			},
		},
		{
			name: "1x2",
			args: args{
				width:  1,
				height: 2,
			},
			want: want{
				result: Bitmap{
					data:   make([]byte, BPP*1*2),
					width:  1,
					height: 2,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := New(tt.args.width, tt.args.height)
			if !reflect.DeepEqual(result.data, tt.want.result.data) {
				t.Fatalf("wrong data: %#v expected, got %#v", tt.want.result.data, result.data)
			}
			if result.width != tt.want.result.width {
				t.Fatalf("wrong width: %d expected, got %d", tt.want.result.width, result.width)
			}
			if result.height != tt.want.result.height {
				t.Fatalf("wrong height: %d expected, got %d", tt.want.result.height, result.height)
			}
		})
	}
}

func TestBitmap_IsNil(t *testing.T) {
	type args struct {
		b Bitmap
	}
	type want struct {
		result bool
	}
	tests := []struct {
		name string
		args args
		want want
	}{
		{
			name: "nil",
			args: args{
				b: Bitmap{},
			},
			want: want{
				result: true,
			},
		},
		{
			name: "0x0",
			args: args{
				b: New(0, 0),
			},
			want: want{
				result: false,
			},
		},
		{
			name: "1x2",
			args: args{
				b: New(1, 2),
			},
			want: want{
				result: false,
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := tt.args.b.IsNil()
			if result != tt.want.result {
				t.Fatalf("%t expected, got %t", tt.want.result, result)
			}
		})
	}
}

func TestBitmap_Width(t *testing.T) {
	type args struct {
		b Bitmap
	}
	type want struct {
		result int
	}
	tests := []struct {
		name string
		args args
		want want
	}{
		{
			name: "nil",
			args: args{
				b: Bitmap{},
			},
			want: want{
				result: 0,
			},
		},
		{
			name: "1x2",
			args: args{
				b: Bitmap{
					width:  1,
					height: 2,
				},
			},
			want: want{
				result: 1,
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := tt.args.b.Width()
			if result != tt.want.result {
				t.Fatalf("%d expected, got %d", tt.want.result, result)
			}
		})
	}
}

func TestBitmap_Height(t *testing.T) {
	type args struct {
		b Bitmap
	}
	type want struct {
		result int
	}
	tests := []struct {
		name string
		args args
		want want
	}{
		{
			name: "nil",
			args: args{
				b: Bitmap{},
			},
			want: want{
				result: 0,
			},
		},
		{
			name: "1x2",
			args: args{
				b: Bitmap{
					width:  1,
					height: 2,
				},
			},
			want: want{
				result: 2,
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := tt.args.b.Height()
			if result != tt.want.result {
				t.Fatalf("%d expected, got %d", tt.want.result, result)
			}
		})
	}
}

func TestBitmap_Data(t *testing.T) {
	type args struct {
		b Bitmap
	}
	type want struct {
		result []byte
	}
	tests := []struct {
		name string
		args args
		want want
	}{
		{
			name: "nil",
			args: args{
				b: Bitmap{},
			},
			want: want{
				result: nil,
			},
		},
		{
			name: "empty",
			args: args{
				b: Bitmap{
					data: make([]byte, 0),
				},
			},
			want: want{
				result: make([]byte, 0),
			},
		},
		{
			name: "non_empty",
			args: args{
				b: Bitmap{
					data: []byte{0x89, 0xAB, 0xCD, 0xEF},
				},
			},
			want: want{
				result: []byte{0x89, 0xAB, 0xCD, 0xEF},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := tt.args.b.Data()
			if !reflect.DeepEqual(result, tt.want.result) {
				t.Fatalf("%#v expected, got %#v", tt.want.result, result)
			}
		})
	}
}

func TestBitmap_Get(t *testing.T) {
	type args struct {
		b Bitmap
		x int
		y int
	}
	type want struct {
		result colors.RGBA
	}
	tests := []struct {
		name string
		args args
		want want
	}{
		{
			name: "nil;(1,2)",
			args: args{
				b: Bitmap{},
				x: 1,
				y: 2,
			},
			want: want{
				result: colors.RGBA{},
			},
		},
		{
			name: "2x4;(1,2)",
			args: args{
				b: Bitmap{
					data: []byte{
						0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF,
						0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					},
					width:  2,
					height: 4,
				},
				x: 1,
				y: 2,
			},
			want: want{
				result: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := tt.args.b.Get(tt.args.x, tt.args.y)
			if result != tt.want.result {
				t.Fatalf("%s expected, got %s", tt.want.result, result)
			}
		})
	}
}

func TestBitmap_Set(t *testing.T) {
	type args struct {
		b     Bitmap
		x     int
		y     int
		color colors.RGBA
	}
	type want struct {
		bData []byte
	}
	tests := []struct {
		name string
		args args
		want want
	}{
		{
			name: "nil;(1,2)",
			args: args{
				b:     Bitmap{},
				x:     1,
				y:     2,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: nil,
			},
		},
		{
			name: "2x4;(1,2)",
			args: args{
				b:     New(2, 4),
				x:     1,
				y:     2,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.args.b.Set(tt.args.x, tt.args.y, tt.args.color)
			if !reflect.DeepEqual(tt.args.b.data, tt.want.bData) {
				t.Fatalf("%#v expected, got %#v", tt.want.bData, tt.args.b.data)
			}
		})
	}
}

func TestBitmap_Fill(t *testing.T) {
	type args struct {
		b     Bitmap
		color colors.RGBA
	}
	type want struct {
		bData []byte
	}
	tests := []struct {
		name string
		args args
		want want
	}{
		{
			name: "nil",
			args: args{
				b:     Bitmap{},
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: nil,
			},
		},
		{
			name: "2x3",
			args: args{
				b:     New(2, 3),
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF,
					0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF,
					0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.args.b.Fill(tt.args.color)
			if !reflect.DeepEqual(tt.args.b.data, tt.want.bData) {
				t.Fatalf("%#v expected, got %#v", tt.want.bData, tt.args.b.data)
			}
		})
	}
}

func TestBitmap_Line(t *testing.T) {
	type args struct {
		b     Bitmap
		x1    int
		x2    int
		y     int
		color colors.RGBA
	}
	type want struct {
		bData []byte
	}
	tests := []struct {
		name string
		args args
		want want
	}{
		{
			name: "nil;(1->3,2)",
			args: args{
				b:     Bitmap{},
				x1:    1,
				x2:    3,
				y:     2,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: nil,
			},
		},
		{
			name: "5x4;(1->1,2)",
			args: args{
				b:     New(5, 4),
				x1:    1,
				x2:    1,
				y:     2,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x4;(1->3,2)",
			args: args{
				b:     New(5, 4),
				x1:    1,
				x2:    3,
				y:     2,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x4;(-1->3,2)",
			args: args{
				b:     New(5, 4),
				x1:    -1,
				x2:    3,
				y:     2,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x4;(1->5,2)",
			args: args{
				b:     New(5, 4),
				x1:    1,
				x2:    5,
				y:     2,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x4;(3->1,2)",
			args: args{
				b:     New(5, 4),
				x1:    3,
				x2:    1,
				y:     2,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x4;(-3->-1,2)",
			args: args{
				b:     New(5, 4),
				x1:    -3,
				x2:    -1,
				y:     2,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x4;(5->7,2)",
			args: args{
				b:     New(5, 4),
				x1:    5,
				x2:    7,
				y:     2,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x4;(1->3,4)",
			args: args{
				b:     New(5, 4),
				x1:    1,
				x2:    3,
				y:     4,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.args.b.Line(tt.args.x1, tt.args.x2, tt.args.y, tt.args.color)
			if !reflect.DeepEqual(tt.args.b.data, tt.want.bData) {
				t.Fatalf("%#v expected, got %#v", tt.want.bData, tt.args.b.data)
			}
		})
	}
}

func TestBitmap_Lines(t *testing.T) {
	type args struct {
		b      Bitmap
		length int
		xy     [][2]int
		color  colors.RGBA
	}
	type want struct {
		bData []byte
	}
	tests := []struct {
		name string
		args args
		want want
	}{
		{
			name: "nil;3;(1,2)",
			args: args{
				b:      Bitmap{},
				length: 3,
				xy:     [][2]int{{1, 2}},
				color:  colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: nil,
			},
		},
		{
			name: "5x4;1;(1,2)",
			args: args{
				b:      New(5, 4),
				length: 1,
				xy:     [][2]int{{1, 2}},
				color:  colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x4;3;(1,2)",
			args: args{
				b:      New(5, 4),
				length: 3,
				xy:     [][2]int{{1, 2}},
				color:  colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x4;3;(1,2);(0,3)",
			args: args{
				b:      New(5, 4),
				length: 3,
				xy:     [][2]int{{1, 2}, {0, 3}},
				color:  colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00,
					0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x4;3;(1,2);(2,2);(0,3)",
			args: args{
				b:      New(5, 4),
				length: 3,
				xy:     [][2]int{{1, 2}, {2, 2}, {0, 3}},
				color:  colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF,
					0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x4;3;(-4,0);(1,-1);(-1,1);(1,2);(4,3);(5;0);(4;4)",
			args: args{
				b:      New(5, 4),
				length: 3,
				xy:     [][2]int{{-4, 1}, {1, -1}, {-1, 1}, {1, 2}, {4, 3}, {4, 4}},
				color:  colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.args.b.Lines(tt.args.length, tt.args.xy, tt.args.color)
			if !reflect.DeepEqual(tt.args.b.data, tt.want.bData) {
				t.Fatalf("%#v expected, got %#v", tt.want.bData, tt.args.b.data)
			}
		})
	}
}

func TestBitmap_Rect(t *testing.T) {
	type args struct {
		b     Bitmap
		x1    int
		y1    int
		x2    int
		y2    int
		color colors.RGBA
	}
	type want struct {
		bData []byte
	}
	tests := []struct {
		name string
		args args
		want want
	}{
		{
			name: "nil;(1->3,2->4)",
			args: args{
				b:     Bitmap{},
				x1:    1,
				x2:    3,
				y1:    2,
				y2:    4,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: nil,
			},
		},
		{
			name: "5x6;(1->3,2->4)",
			args: args{
				b:     New(5, 6),
				x1:    1,
				x2:    3,
				y1:    2,
				y2:    4,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x6;(-1->3,-1->4)",
			args: args{
				b:     New(5, 6),
				x1:    -1,
				x2:    3,
				y1:    -1,
				y2:    4,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00,
					0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00,
					0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00,
					0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00,
					0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x6;(1->5,2->6)",
			args: args{
				b:     New(5, 6),
				x1:    1,
				x2:    5,
				y1:    2,
				y2:    6,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF,
					0x00, 0x00, 0x00, 0x00 /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF /**/, 0x89, 0xAB, 0xCD, 0xEF,
				},
			},
		},
		{
			name: "5x6;(3->1,2->4)",
			args: args{
				b:     New(5, 6),
				x1:    3,
				x2:    1,
				y1:    2,
				y2:    4,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x6;(1->3,4->2)",
			args: args{
				b:     New(5, 6),
				x1:    1,
				x2:    3,
				y1:    4,
				y2:    2,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x6;(-3->-1,2->4)",
			args: args{
				b:     New(5, 6),
				x1:    -3,
				x2:    -1,
				y1:    2,
				y2:    4,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x6;(1->3,-4->-2)",
			args: args{
				b:     New(5, 6),
				x1:    3,
				x2:    1,
				y1:    2,
				y2:    4,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x6;(5->7,2->4)",
			args: args{
				b:     New(5, 6),
				x1:    5,
				x2:    7,
				y1:    2,
				y2:    4,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			name: "5x6;(1->3,6->8)",
			args: args{
				b:     New(5, 6),
				x1:    1,
				x2:    3,
				y1:    6,
				y2:    8,
				color: colors.RGBA{0x89, 0xAB, 0xCD, 0xEF},
			},
			want: want{
				bData: []byte{
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00 /**/, 0x00, 0x00, 0x00, 0x00,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.args.b.Rect(tt.args.x1, tt.args.y1, tt.args.x2, tt.args.y2, tt.args.color)
			if !reflect.DeepEqual(tt.args.b.data, tt.want.bData) {
				t.Fatalf("%#v expected, got %#v", tt.want.bData, tt.args.b.data)
			}
		})
	}
}
